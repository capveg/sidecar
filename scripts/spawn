#!/usr/bin/perl -w
#$Id: spawn,v 1.3 2005/03/17 16:27:23 ruggero Exp $

sub usage{
	print STDERR @_ if(@_);
	print STDERR << "EOF";

$0 [n] <-f hostfile> [-p paramfile] [-r rootdir] 
	[-t  time between execs] [-s] -- command ...

If a 'paramfile' is specified, spawn one instance of 'command' per line
in the parameter file.  Only allow one process per machine for up to
'n' machines, where 'n'=all by default.

If no 'paramfile' is specified, run the command once per machine, for
the first 'n' machines.


Examples:

	`spawn -f roguenodes -- killall myproc`
	`spawn 10 -f roguenodes -- ./myproc -f \%%H.out`
	`spawn -f bluenodes -p numbers_file -- ./factor \%%P`
	`spawn -f hosts -p params -- echo Running with %%P on %%H`

Output is made to the current directory, and each output is saved to a file.

The -s option causes spawn to not implicitly call ssh.

In the 'command' : 
All '%%H' are replaced with the appropriate host from the hostfile
All '%%P' are replaced with the appropriate parameter from the paramfile


EOF
	exit(1);
}

$ROOT="";
$VERBOSE=0;
$RAW=0;
$NoSSH=0;
$HOSTFILE="";
$PARAMFILE="";
$COUNT=-1;

$sshopts="-a -x -o BatchMode=yes -n -o StrictHostKeyChecking=no";

@HOSTS=();
$TIME=0;


# Launch n remote processes with the provided args 
# 	of the machines listed in the HOSTS file, seperated by
# 	time seconds; put output in "outdir-n-time-pid/"

while($ARGV[0] and $ARGV[0] ne "--"){
	if($ARGV[0] eq "-f"){
		shift @ARGV;
		$HOSTFILE="$ROOT". shift;
		next;
	}
	if($ARGV[0] eq "-v"){
		$VERBOSE=1;
		shift @ARGV;
		next;
	}
	if($ARGV[0] eq "-r"){
		shift;
		$ROOT=shift;
		if(!defined($ROOT)){
			 usage("-r needs a parameter\n");
		}
		next;
	}
	if($ARGV[0] eq "-p"){
		shift;
		$PARAMFILE=shift;
		if(!defined($PARAMFILE)){
			usage("-p needs a parameter\n");
		}
		next;
	}
	if($ARGV[0] eq "-t"){
		shift;
		$TIME=shift;
		if(!defined($TIME)){
			 usage("-t needs a parameter\n");
		}
		next;
	}
	if($ARGV[0] eq "-raw"){
		shift;
		$RAW=1;
		next;
	}
	if($ARGV[0] =~ /(\d+)/){
		$COUNT=$1;
		shift;
		if($COUNT<0){
			usage("Bad Count: $COUNT\n");
		}
		next;
	}
	if($ARGV[0] eq "-s")
	{
		$NoSSH=1;
		shift;
		next;
	}
	usage("Unknown parameter ".$ARGV[0]);
}

if($VERBOSE){
	print "TIME=$TIME, ROOT=$ROOT, VERBOSE=$VERBOSE\n";
}

if(!defined($ARGV[0]) || $ARGV[0] ne "--"){
	usage("Needs -- and 'command'\n");
}
shift @ARGV;
if($HOSTFILE)
{
	open H, $HOSTFILE or die "open: $HOSTFILE: $!";
	while(<H>){
		chomp;
		push @HOSTS,$_;	
	}
	$COUNT=scalar(@HOSTS) unless ($COUNT>0);
}
else
{
	if(($NoSSH)&&($COUNT>0))
	{
		print STDERR "Creating $COUNT fake host entries... \n";
		for($i=0;$i<$COUNT;$i++)
		{
			$HOSTS[$i]="localhost";
		}
	}
	else
	{
		usage("Need to specify a hostfile\n");
	}
}
if($PARAMFILE){
	&do_per_param();
} else {
	&do_per_host();
}
print "DONE\n";


sub do_per_host{ 
	$done=0;
	if($VERBOSE){
		print "By Host: spawning ",scalar(@HOSTS),"jobs\n";
	}

	if($COUNT>scalar(@HOSTS)){
		print STDERR "Requested $COUNT nodes, only have ",scalar(@HOSTS)," : wrapping\n";
	}

	for($i=0;$i<$COUNT;$i++){
		$ret = spawn($HOSTS[$i%@HOSTS],"%%P","$HOSTS[$i%@HOSTS]-$i.out");
		if($ret> 0){
			$done++;
			sleep($TIME);
		}
	}
	# wait for stuff
	for($i=0;$i<$done;$i++){
		$ret=wait;
		print "SPAWN ", $done-$i-1, " left :: $PIDS{$ret} ($ret) returned with $?\n";
	}
}
			

sub do_per_param{ 
	$done=0;
	$i=0;
	$j=0;
	open PARAMSF, "$PARAMFILE" or die "open Paramfile $PARAMFILE: $!";
	@PARAMS=<PARAMSF>;
	chomp @PARAMS;
	if($VERBOSE){
		print "By Param: spawning ",@PARAMS,"jobs\n";
	}
		
	# initial start
	while(($j<@PARAMS)&&($i<@HOSTS)){
		if($PARAMS[$j]=~/^#/){		# skip comments
			$j++;
			next;
		}
		$ret = spawn($HOSTS[$i++],$PARAMS[$j++]);
		if($ret> 0){
			$done++;
			sleep($TIME);
		}
	}
	# everytime something ends, start something new
	while($j<@PARAMS){
		if($PARAMS[$j]=~/^#/){		# skip comments
			$j++;
			next;
		}
		$ret=wait;
		print "SPAWN ", @PARAMS-$j, " left :: $PIDS{$ret} ($ret) returned with $?\n";
		$nret=spawn($PIDS{$ret},$PARAMS[$j++]);
		delete $PIDS{$ret};
		$ret=$nret;
		if($ret>0){
			sleep($TIME);
		}
	}
	
	# wait for stuff to be done
	for($i=0;$i<$done;$i++){
		$ret=wait;
		print "SPAWN ", $done-$i-1, " left :: $PIDS{$ret} ($ret) returned with $?\n";
	}
}
			
sub spawn { 
	$host = shift;
	$param = shift || "%%P" ;# make it a NOOP to update if no param
	$OUT = shift || undef;
	my @cmd = copyList(@ARGV);
	update($host,$param,@cmd);
	if(!$OUT){
		if($param ne "%%P"){
			$tmp=$param;
			$tmp=~s/\s+$//g;
			$tmp=~s/\s+/_/g;
			$tmp=~s/\//_/g;
			$OUT="$tmp.out";
		} else {
			$OUT="$host.out";
		}
	}
	unlink($OUT);
	my $cmdline = join "' '",@cmd;
	$cmdline="ssh $sshopts $host '$cmdline'" unless($NoSSH);	# add call to ssh if needed
	$pid = fork();
	if(! defined($pid)){
		 warn "fork() failed: $!";
	}
	if($pid == 0){ 	# child
	    if ($RAW) {
		open STDOUT, '>', $OUT or die "Can't redirect STDOUT: $!";
		open STDERR, ">&STDOUT" or die "Can't dup STDOUT: $!";

		exec($cmdline);
		die "Can't exec command: @cmd\n";
	    } else {
		if($VERBOSE){
		    system("$cmdline 2>&1 | tee $OUT");
		}else {
		    system("$cmdline > $OUT 2>&1");
		}
		exit($?);
	    }
	}
	if($param ne "%%P"){
		print "Spawned Param $param to $host, writing to $OUT\n";
	} else {
		print "Spawned @cmd on $host to outfile $OUT\n";
	}
	$PIDS{$pid}=$host;
	return $pid;
}
		
sub copyList {
	my @dst;
	my $i;
	for($i=0;$i<@_;$i++){
		$dst[$i]=$_[$i];
	}
	return @dst;
}

sub update {
	$host = shift;
	$param = shift;	
	my $i;
	for($i=0;$i<@_;$i++){
		$_[$i]=~ s/%%H/$host/g;
		$_[$i]=~ s/%%P/$param/g;
	}
	
}
